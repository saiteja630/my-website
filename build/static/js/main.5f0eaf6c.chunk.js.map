{"version":3,"sources":["Logos/devIcon.svg","Logos/me.png","Carousel/index.js","Header/index.js","About/index.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","CarouselComp","Row","Col","xs","className","src","Logo","alt","Header","useState","show","setShow","class","to","onClick","About","width","Me","App","exact","path","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f0eaf6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/devIcon.06092ce7.svg\";","module.exports = __webpack_public_path__ + \"static/media/me.93ff5437.png\";","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap';\r\n//import Avatar from '../Logos/my_image.png';\r\nimport Logo from '../Logos/devIcon.svg';\r\n//import Logo from './icon';\r\n\r\nimport './Carousel.scss';\r\n\r\nconst CarouselComp = () => {\r\n  return <Row>\r\n    <Col xs={12} className=\"d-block d-sm-none container\">\r\n      <img className=\"hero-image\" src={Logo} alt=\"saiMadiredd\"/>\r\n    </Col>\r\n    <Col xs={12}>\r\n      <div className=\"container main-banner\">\r\n        <h1 className=\"hello\">{`Hi There,`}</h1>\r\n        <h1 className=\"hello\">{`Welcome to my page.`}</h1>\r\n        <h2 className=\"subHeader\">{`I design and code beautifully simple things, and I love what I do.`}</h2>\r\n      </div>\r\n    </Col>\r\n    <Col xs={12} className=\"d-none d-sm-block\">\r\n      {/* <Logo/> */}\r\n      <i className=\"hero-logo\"/>\r\n      <img className=\"hero-image\" src={Logo} alt=\"saiMadiredd\"/>\r\n    </Col>\r\n  </Row>\r\n}\r\nexport default CarouselComp;","import React, {useState} from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n//import Logo from '../Logos/my_logo.png';\r\nimport './Header.scss';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    const [show, setShow] = useState(false);\r\n    return <header>\r\n        <Row>\r\n            <Col xs={6} className=\"d-none d-sm-block\"> \r\n                <div class=\"header-main\">S T M</div>\r\n            </Col>\r\n            <Col xs={6} className=\"header-main d-none d-sm-block\"> \r\n                <Link to=\"/\" className=\"header-button\"> Home</Link>\r\n                <Link to=\"/about\" className=\"header-button\"> About Me</Link>\r\n                <Link to=\"/hello\" className=\"header-button\"> Say Hello</Link>\r\n            </Col>\r\n            <Col xs={10} className={`d-block d-sm-none container`} onClick={() => setShow(!show)}>\r\n                <div class=\"small-logo\">S T M</div>\r\n            </Col>\r\n            <Col xs={2} className={`d-block d-sm-none side-bar ${show ? 'change': 'nochange'}`} onClick={() => setShow(!show)}>\r\n                <div class=\"bar1\"></div>\r\n                <div class=\"bar2\"></div>\r\n                <div class=\"bar3\"></div>\r\n            </Col>\r\n            <div className={`d-block d-sm-none side-bar ${show ? 'change': 'nochange'}`}>\r\n               <Col xs={12} className=\"wrapper\" onClick={() => setShow(!show)}>\r\n                   <Link to=\"/\" className=\"header-button\"> Home</Link></Col>\r\n               <Col xs={12} className=\"wrapper\" onClick={() => setShow(!show)}>\r\n                   <Link to=\"/about\" className=\"header-button\"> About Me</Link></Col>\r\n               <Col xs={12} className=\"wrapper\" onClick={() => setShow(!show)}>\r\n                   <Link to=\"/hello\" className=\"header-button\"> Say Hello</Link></Col>\r\n            </div>\r\n        </Row>\r\n    </header>\r\n}\r\nexport default Header;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Me from '../Logos/me.png';\r\nimport './About.scss';\r\n\r\nconst About = () => {\r\n    //const [show, setShow] = useState(false);\r\n    return <Row>\r\n    <Col xs={12}>\r\n    <div className=\"container main-banner\">\r\n        <h1 className=\"hello\">{`Who am I?`}</h1>\r\n    </div></Col> \r\n    <Col xs={12}>\r\n      <div className=\"container main-banner\">\r\n        <h2 className=\"subHeader\"> Hi, I'm Sai Teja Madireddy. I live in Stamford, CT. </h2>\r\n        <h2 className=\"subHeader\">I'm originally from a town named Nellore in AP, India. </h2>\r\n        <h2 className=\"subHeader\">After completing my Bachelors, I was more intrested to do a masters degree.</h2>\r\n        <h2 className=\"subHeader\">In accordance to it, I came to US and did Masters from University of Michigan</h2>\r\n      </div>\r\n    </Col>\r\n    <Col xs={12}><img width=\"20%\" src={Me} alt=\"my logo\"/></Col>\r\n\r\n    </Row>\r\n}\r\nexport default About;","import React from 'react';\r\n//import logo from '../logo.svg';\r\nimport CarouselComp from '../Carousel/index';\r\nimport Header from '../Header/index';\r\nimport About from '../About/index';\r\n//import Footer from '../Footer/index';\r\nimport './App.scss';\r\n//import Avatar from '../Logos/my_image.png';\r\n//import Fullpage, { FullPageSections, FullpageSection } from '@ap.cx/react-fullpage'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return <div className='App'>\r\n     <Router>\r\n     <Header/>\r\n     <Switch>\r\n        <Route exact path=\"/\"> \r\n          <CarouselComp/>\r\n        </Route>\r\n        <Route exact path=\"/about\">\r\n          <About/>\r\n        </Route>\r\n        <Route exact path=\"/hello\">\r\n          <div>hello PAGE</div>\r\n        </Route>\r\n        <Redirect from='*' to='/'/>\r\n        </Switch>\r\n    </Router>\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App/index';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}